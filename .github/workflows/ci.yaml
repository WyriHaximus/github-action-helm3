name: Continuous Integration
env:
  DOCKER_IMAGE: wyrihaximusgithubactions/helm3
  DOCKER_BUILDKIT: 1
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  generate-ref:
    name: Generate Ref
    runs-on: ubuntu-latest
    outputs:
      REF: ${{ steps.generate-ref.outputs.ref }}
    steps:
      - uses: actions/checkout@v1
      - id: generate-ref
        name: Generate Ref
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] ; then
            ref=$(php -r "echo str_replace('/', '-SLASH-', '${{ github.event.pull_request.head.ref }}');")
            echo "$ref"
            printf "::set-output name=ref::%s" $ref
            exit 0
          fi
          echo "${GITHUB_REF##*/}"
          echo "::set-output name=ref::${GITHUB_REF##*/}"
  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Lint Dockerfile
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: Dockerfile-build
  build-docker-image:
    name: Build Docker image
    needs:
      - generate-ref
      - lint-dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to Docker Hub
        if: contains(github.ref, 'dependabot') == false
        env:
          DOCKER_USER: ${{ secrets.HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.HUB_PASSCODE }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | \
          docker login \
            --username "${{ secrets.DOCKER_USER }}" \
            --password-stdin
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - run: echo "${DOCKER_IMAGE}:${REF}" | tr '[:upper:]' '[:lower:]'
        env:
          REF: ${{ needs.generate-ref.outputs.ref }}
      - run: docker build --platform=linux/arm/v7,linux/arm64,linux/amd64 --output=type=registry --no-cache -t $(echo "${DOCKER_IMAGE}:${REF}" | tr '[:upper:]' '[:lower:]') . -f Dockerfile-build
        env:
          REF: ${{ needs.generate-ref.outputs.ref }}
      - run: |
          printf "FROM %s" $(echo "${DOCKER_IMAGE}:${REF}" | tr '[:upper:]' '[:lower:]') >> Dockerfile.tag
          docker build --platform=linux/arm/v7,linux/arm64,linux/amd64 --output=type=registry --no-cache -f Dockerfile.tag -t $(echo "${DOCKER_IMAGE}:sha-${GITHUB_SHA}" | tr '[:upper:]' '[:lower:]') .
        env:
          REF: ${{ needs.generate-ref.outputs.ref }}
      - run: docker run -v /tmp/trivy:/var/lib/trivy -v /var/run/docker.sock:/var/run/docker.sock -t aquasec/trivy:latest --cache-dir /var/lib/trivy image --exit-code 1 --no-progress --format table $(echo "${DOCKER_IMAGE}:${REF}" | tr '[:upper:]' '[:lower:]')
        env:
          REF: ${{ needs.generate-ref.outputs.ref }}
      - run: docker images
  tests-helm-works:
    name: "Testing Helm Command: ${{ matrix.exec }}"
    needs:
      - build-docker-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        exec:
          - "helm version"
          - "helm repo add WyriHaximusNet https://helm.wyrihaximus.net/"
          - "helm repo add WyriHaximusNet https://helm.wyrihaximus.net/ && helm repo list"
          - "helm plugin install https://github.com/hypnoglow/helm-s3.git"
          - "helm plugin install https://github.com/hypnoglow/helm-s3.git && helm plugin list"
          - "helm env"
    steps:
      - uses: actions/checkout@v1
      - run: sed -i "s/master/sha-${GITHUB_SHA}/g" Dockerfile
      - uses: ./
        with:
          exec: ${{ matrix.exec }}
          kubeconfig: tada
  tests-helm-output:
    name: "Testing Helm Output"
    needs:
      - build-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: sed -i "s/master/sha-${GITHUB_SHA}/g" Dockerfile
      - uses: ./
        id: helm3
        with:
          exec: helm repo add WyriHaximusNet https://helm.wyrihaximus.net/ && helm repo list
          kubeconfig: tada
      - run: |
          php -r "exit(strpos('${HELM_OUTPUT}', 'WyriHaximusNet') !== false ? 0 : 255);"
        env:
          HELM_OUTPUT: ${{ steps.helm3.outputs.helm_output }}
      - run: |
          php -r "exit(strpos('${HELM_OUTPUT}', 'has been added to your repositories') !== false ? 0 : 255);"
        env:
          HELM_OUTPUT: ${{ steps.helm3.outputs.helm_output }}
      - run: |
          php -r "exit(strpos('${HELM_OUTPUT}', 'https://helm.wyrihaximus.net/') !== false ? 0 : 255);"
        env:
          HELM_OUTPUT: ${{ steps.helm3.outputs.helm_output }}
  tests-helm-install:
    name: "Testing Helm Install"
    needs:
      - build-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: sed -i "s/master/sha-${GITHUB_SHA}/g" Dockerfile
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.7.0
        with:
          config: etc/ci/kind.config
      - run: |
          kubectl cluster-info
          kubectl get nodes
      - run: docker ps
      - run: docker ps --format "{{.ID}}"
      - name: Get running image ID
        id: ps
        run: printf "id=%s" $(docker ps --format "{{.ID}}")  >> "$GITHUB_OUTPUT"
        env:
          IMAGE: ${{ steps.build.outputs.tag }}
      - name: Get running image IP
        id: inspect
        run: printf "ip=%s" $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${IMAGE_ID}) >> "$GITHUB_OUTPUT"
        env:
          IMAGE_ID: ${{ steps.ps.outputs.id }}
      - run: sed -i "s/0.0.0.0:/${KIND_IP}:/g" ~/.kube/config
#      - run: sed -i "s/0.0.0.0:/127.0.0.1:/g" ~/.kube/config
        env:
          KIND_IP: ${{ steps.inspect.outputs.ip }}
      - run: |
          kubectl cluster-info
          kubectl get nodes
      - name: Make kubeconfig available to Helm3 action
        run: |
          kubeconfig=$(cat ~/.kube/config)
          kubeconfig="${kubeconfig//'%'/'%25'}"
          kubeconfig="${kubeconfig//$'\n'/'%0A'}"
          kubeconfig="${kubeconfig//$'\r'/'%0D'}"
          echo "::set-output name=kubeconfig::$kubeconfig"
        id: kubeconfig
      - name: List installed packages
        uses: ./
        id: helmlistcountfirst
        with:
          exec: |
            printf "::set-output name=count::%s" $(helm list | grep ducker-hub-exporter | wc -l)
          kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}
      - run: |
          php -r "exit('${COUNT}' === '0' ? 0 : 255);"
        env:
          COUNT: ${{ steps.helmlistcountfirst.outputs.count }}
      - name: Install ducker-hub-exporter
        uses: ./
        id: helm3
        with:
          exec: |
            helm repo add WyriHaximusNet https://helm.wyrihaximus.net/
            helm install ducker-hub-exporter WyriHaximusNet/docker-hub-exporter --atomic
          kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}
      - name: List installed packages
        uses: ./
        with:
          exec: |
            helm list
          kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}
      - name: List installed packages
        uses: ./
        id: helmlistcountseccond
        with:
          exec: |
            printf "::set-output name=count::%s" $(helm list | grep ducker-hub-exporter | wc -l)
          kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}
      - run: |
          php -r "exit('${COUNT}' === '1' ? 0 : 255);"
        env:
          COUNT: ${{ steps.helmlistcountseccond.outputs.count }}
      - name: UnInstall ducker-hub-exporter
        uses: ./
        with:
          exec: |
            helm uninstall ducker-hub-exporter
          kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}
      - name: List installed packages
        uses: ./
        id: helmlistcountthird
        with:
          exec: |
            printf "::set-output name=count::%s" $(helm list | grep ducker-hub-exporter | wc -l)
          kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}
      - run: |
          php -r "exit('${COUNT}' === '0' ? 0 : 255);"
        env:
          COUNT: ${{ steps.helmlistcountthird.outputs.count }}
